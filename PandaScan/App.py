# ------------------------------------------------------------------------------------------------------------
# ____                     __               ____                               
#/\  _`\                  /\ \             /\  _`\                             
#\ \ \L\ \ __      ___    \_\ \     __     \ \,\L\_\    ___     __      ___    
# \ \ ,__/'__`\  /' _ `\  /'_` \  /'__`\    \/_\__ \   /'___\ /'__`\  /' _ `\  
#  \ \ \/\ \L\.\_/\ \/\ \/\ \L\ \/\ \L\.\_    /\ \L\ \/\ \__//\ \L\.\_/\ \/\ \ 
#   \ \_\ \__/.\_\ \_\ \_\ \___,_\ \__/.\_\   \ `\____\ \____\ \__/.\_\ \_\ \_\
#    \/_/\/__/\/_/\/_/\/_/\/__,_ /\/__/\/_/    \/_____/\/____/\/__/\/_/\/_/\/_/
#                                                                              
# ------------------------------------------------------------------------------------------------------------
# Welcome to PandaScan üêº | @2023 by CAprogs
# This is a project that aims to download mangas scans from a website by selecting the manga and chapters wished.
# scans are downloaded by a simple request.
# Ublock ( A Chrome Extension ) is recommand to use this Software.
# The Download Time depends on the number of Chapters to download and their Number of pages.
# Note 1 : Some websites may not provide accurate informations or may be empty. Another Features that permit to switch between websites for download will be available at the next update.
# Note 2 : An Update button will be available so your manga list can be up to date if there's new manga chapters availables ( Not available Yet )
# Credits: @Tkinter Designer by ParthJadhav 
# ------------------------------------------------------------------------------------------------------------

# Mettre √† jour la docu 0/1
# Mettre √† jour le bouton Update 0/2
# Migrer les d√©pendances de l'app dans des fichiers externes .py 0/-||-

# Importation des biblioth√®ques utiles
import os
import pandas as pd
import yaml
import tkinter as tk
import requests
import zipfile
import io
from lxml import html
from tkinter import ttk
from tkinter import Tk, Canvas, Entry, Button, PhotoImage, StringVar, OptionMenu
from tkinter import messagebox
from tkinter.font import Font
from pathlib import Path
from bs4 import BeautifulSoup

################################ Variables Globales ############################################
All_chapters_len = 0    #  stocker le nombre de chapitres total d'un manga s√©lectionn√©
total_downloads = 0     #  stocker le nombre de t√©l√©chargements de Chapitres √† effectuer
current_download = 0    #  variable d'incr√©mentation du nombre de t√©l√©chargements
manga_current_name = '' #  stocker le nom du manga s√©lectionn√©
chapters_current_selected = [] # stocker la liste des chapitres s√©lectionn√©s
Download_state = False # Etat du bouton Download
nom_fichier = '' # Chemin vers le fichier du manga √† t√©l√©charger
selected_website = "scantrad-vf"
#################################################################################################

# Obtenir le chemin absolu du r√©pertoire contenant le script
script_directory = Path(os.path.dirname(os.path.realpath(__file__)))

# chemin relatif vers le dossier "frame0"
assets_directory = script_directory / "frame0"
mangas_path = script_directory / f"datas/{selected_website}/mangas.csv"
chapters_path = script_directory / f"datas/{selected_website}/mangas_chapters.yml"

# Chargement des datas ( par d√©faut )
with open(chapters_path, 'r') as file:
        chapitres = yaml.safe_load(file)
datas = pd.read_csv(mangas_path)

#################################################################################################

# Initialiser la fen√™tre Tkinter
window = Tk()

# Donner un nom √† la fen√™tre
window.title("PandaScan üêº")

# Param√®tres par d√©faut de la fen√™tre
window.geometry("962x686")
window.configure(bg = "#FFFFFF")
canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 686,
    width = 962,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)
canvas.place(x = 0, y = 0)

# D√©finition de Fonts personnalis√©s
bold_font = Font(family="Arial", size=10) 

######################################################################   FONCTIONS  & CLASSES  ######################################################################
# Importation des √©l√©ments graphique
def relative_to_assets(path: str) -> Path:
    return assets_directory / Path(path)

# Action √† effectuer √† la fermeture de l'application
def on_closing():
    window.destroy() # Fermeture de la fen√™tre tkinter

def Update_website(*args):
    global selected_website
    global mangas_path
    global chapters_path
    global chapitres
    global datas

    selected_item = website_list_var.get()
    selected_website = selected_item
    print(f"\nWebsite s√©lectionn√© : {selected_item}")                                               ##### Track activity
    
    mangas_path = script_directory / f"datas/{selected_website}/mangas.csv"
    chapters_path = script_directory / f"datas/{selected_website}/mangas_chapters.yml"

    with open(chapters_path, 'r') as file:
        chapitres = yaml.safe_load(file)
    datas = pd.read_csv(mangas_path)

    result_box.delete(0, tk.END)  # Effacer le contenu pr√©c√©dent de la liste d√©roulante ( mangas list )
    chapters_box.delete(0, tk.END)  # Effacer le contenu pr√©c√©dent de la liste d√©roulante ( chapters list )

# Mettre √† jour les chapitres et mangas disponibles
def Update_datas():
    None

# Ajouter manuellement des mangas √† la liste des mangas disponibles ( ajouter un bouton +)
def Add_mangas_to_list():  
    None

# Fonction pour attribuer le bon format au chapitre / volume
def chapter_transform(chapter_name):
    global selected_website

    if selected_website == "scantrad-vf":
        result = chapter_name.replace(' ','-')
        return result
    elif selected_website == "lelscans.net" or selected_website == "fmteam.fr":
        result = chapter_name.replace('chapitre ','')
        return result

# Download ou non les √©l√©ments s√©lectionn√©s
def show_Download_info():
    global current_download
    global total_downloads
    global All_chapters_len
    global nom_fichier

    # R√©initialiser les variables du t√©l√©chargement
    current_download = 0

    def Hide_DownloadBox():
        canvas.itemconfigure(image_1, state=tk.HIDDEN)

    # Fonction de t√©l√©chargement (scantrad-vf)
    def scantrad_download(response_url, xpath, save_path, page):

        if response_url.status_code == 200:
            # Parser le contenu HTML
            tree = html.fromstring(response_url.content)
            # Trouver l'√©l√©ment √† partir du xpath donn√©
            image_element = tree.xpath(xpath)
            if image_element:
                # Extraire l'URL de l'image √† partir de l'attribut 'src'
                image_url = image_element[0].get('src')
                # T√©l√©charger l'image
                image_response = requests.get(image_url)
                if image_response.status_code == 200:
                    # Sauvegarder l'image dans le fichier sp√©cifi√©
                    with open(save_path, 'wb') as f:
                        f.write(image_response.content)
                    print(f"Image {page} t√©l√©charg√©e.")                                         ##### Track activity
                    return True
                else:
                    print(f"√âchec du t√©l√©chargement de l'image. Code d'√©tat : {image_response.status_code}")                    ##### Track activity
                    return False
            else:
                print("Aucun √©l√©ment trouv√© pour le xpath donn√©.")                              ##### Track activity
                return False
        else:
            print(f"√âchec de la requ√™te HTTP.| Code d'√©tat : {response_url.status_code}")                        ##### Track activity
            return False
    
    # Fonction de t√©l√©chargement (lelscans.net)
    def lelscans_download(response_url, save_path, page):

        if response_url.status_code == 200:
            # Parser le contenu HTML
            soup = BeautifulSoup(response_url.content, "html.parser")
            
            image_element = soup.find("img", src=True)
            if image_element:
                image_url = image_element["src"]

                # T√©l√©charger l'image
                image_response = requests.get('https://lelscans.net/'+image_url)

                if image_response.status_code == 200:
                    # Sauvegarder l'image dans le fichier sp√©cifi√©
                    with open(save_path, 'wb') as f:
                        f.write(image_response.content)
                    print(f"Image {page} t√©l√©charg√©e.")                                         ##### Track activity
                    return True
                else:
                    print(f"√âchec du t√©l√©chargement de l'image. Code d'√©tat : {image_response.status_code}")                    ##### Track activity
                    return False
            else:
                print("Aucun √©l√©ment trouv√©.")                                                 ##### Track activity
                return False
        else:
            print(f"√âchec du t√©l√©chargement.| Code d'√©tat : {response_url.status_code}")
            return False
    
    # Fonction de t√©l√©chargement (fmteam.fr)
    def fmteam_download(response_url, nom_fichier):

        if response_url.status_code == 200:
            # Utiliser io.BytesIO pour cr√©er un flux binaire √† partir du contenu de la r√©ponse
            zip_stream = io.BytesIO(response_url.content)
            # Cr√©er un objet zipfile.ZipFile √† partir du flux binaire
            with zipfile.ZipFile(zip_stream, "r") as zip_ref:
                namelist = zip_ref.namelist()
                if namelist:
                    # Obtenir le nom du premier fichier/dossier dans la liste
                    first_file = namelist[0]
                    file_name, unecessary = first_file.split("/")
                    file_name_path = nom_fichier / file_name
                    if not os.path.exists(file_name_path):
                        zip_ref.extractall(nom_fichier)
                        return True
                    else:
                        return False
        else:
            print("√âchec du t√©l√©chargement.")
    
    def Download():
        global chapters_current_selected
        global manga_current_name
        global current_download
        global nom_fichier
        global selected_website

        chapter_name = chapters_current_selected[current_download]  # Nom du Chapitre
        nom_chapitre = nom_fichier / chapter_name

        # Cr√©ation du Dossier du chapitre correspondant s'il n'existe pas
        chapter_number = chapter_transform(chapter_name) # retourne le format adapt√© pour le site correspondant

        if selected_website == "scantrad-vf":
            if not os.path.exists(nom_chapitre):
                os.makedirs(nom_chapitre)
                page = 0 # Page de d√©part
                lien_chapitre = str(f"https://scantrad-vf.co/manga/{manga_current_name}/{chapter_number}/?style=list")  # Lien du chapitre
                try:
                    response_url = requests.get(lien_chapitre) # Effectuer une requ√™te HTTP sur l'URL donn√©e
                    while True: # T√©l√©chargement des images
                        xpath = f'//*[@id="image-{page}"]'
                        save_path = f"{nom_chapitre}/{page}.jpg"  # Chemin o√π sauvegarder les images
                        response = scantrad_download(response_url, xpath, save_path, page)
                        if response == True:
                            page += 1
                        else:
                            print(f"\nT√©l√©chargement {current_download} termin√©.\n")                                    ##### Track activity
                            break
                except:
                    print(f"REQUEST ERROR INFOS : {selected_website} | {manga_current_name} | {chapter_number}")              ##### Track activity
            else:
                print(f"Le {chapter_name} du manga : {manga_current_name} est d√©j√† t√©l√©charg√© !")  # ON NE T√âL√âCHARGE PLUS INUTILEMENT LES MANGAS D√âJ√Ä T√âL√âCHARG√âS

        elif selected_website == "lelscans.net":
            if not os.path.exists(nom_chapitre):
                os.makedirs(nom_chapitre)
                page = 1 # Page de d√©part

                while True: # T√©l√©chargement des images
                    lien_chapitre = str(f"https://lelscans.net/scan-{manga_current_name}/{chapter_number}/{page}")  # Lien du chapitre
                    try:
                        response_url = requests.get(lien_chapitre) # Effectuer une requ√™te HTTP sur l'URL donn√©e
                        save_path = f"{nom_chapitre}/{page}.jpg"  # Chemin o√π sauvegarder les images
                        response = lelscans_download(response_url, save_path, page)
                        if response == True:
                            page += 1
                        else:
                            print(f"\nT√©l√©chargement {current_download} termin√©.\n")                                    ##### Track activity
                            break
                    except:
                        print(f"REQUEST ERROR INFOS : {selected_website} | {manga_current_name} | {chapter_number}")              ##### Track activity
            else:
                print(f"Le {chapter_name} du manga : {manga_current_name} est d√©j√† t√©l√©charg√© !")  # ON NE T√âL√âCHARGE PLUS INUTILEMENT LES MANGAS D√âJ√Ä T√âL√âCHARG√âS
        
        elif selected_website == "fmteam.fr":
    
            if "." in chapter_number:
                chapter_number_1, chapter_number_2 = chapter_number.split(".")
                lien_chapitre = str(f"https://fmteam.fr/api/download/{manga_current_name}/fr/ch/{chapter_number_1}/sub/{chapter_number_2}")
            else:
                lien_chapitre = str(f"https://fmteam.fr/api/download/{manga_current_name}/fr/ch/{chapter_number}")
            try:
                response_url = requests.get(lien_chapitre) # Effectuer une requ√™te HTTP sur l'URL donn√©e
                response = fmteam_download(response_url, nom_fichier)
                if response == True:
                    print(f"\nT√©l√©chargement {current_download} termin√©.\n")                                       ##### Track activity
                else:
                    print(f"\nT√©l√©chargement {current_download} impossible OU dossier d√©j√† existant.\n")                                    ##### Track activity
            except:
                print(f"REQUEST ERROR INFOS : {selected_website} | {manga_current_name} | {chapter_number}")              ##### Track activity

        else:
            None     ############ Add another method for another website here ###########
        


    def perform_download():
        global current_download
        global total_downloads
        global Download_state
        global manga_current_name

        Download()
        current_download += 1
        progress = int((current_download / total_downloads) * 100)
        progressbar["value"] = progress
        percentage_label["text"] = f"{progress}%"
        window.update_idletasks()

        if current_download < total_downloads:
            window.after(2000, perform_download)  # Passer au prochain t√©l√©chargement apr√®s 2 s
        else:
            progressbar.place_forget()
            percentage_label.place_forget()
            messagebox.showinfo("Information", "Successfull Pandaload üêº")
            Hide_DownloadBox() # cacher la barre d'infos apr√®s 2 secondes
            button_1.configure(state="normal")  # R√©activer le bouton de t√©l√©chargement
            Download_state = False
            
    def Download_settings():
        global Download_state
        global nom_fichier

        canvas.itemconfigure(image_1, state=tk.NORMAL)
        Download_state = True
        button_1.configure(state="disabled")  # D√©sactiver le bouton de t√©l√©chargement
        progressbar.place(x=800.0, y=520.0) 
        percentage_label.place(x=830.0, y=545.0) 
        perform_download()

    if select_all_var.get() == 1 and All_chapters_len != 0:
        total_downloads = All_chapters_len
        nom_fichier = script_directory / manga_current_name
        if not os.path.exists(nom_fichier):
            os.makedirs(nom_fichier)
        Download_settings()
    elif total_downloads == 0:
        print('Aucun √©l√©ment s√©lectionn√©')                                              ##### Track activity
    else:
        nom_fichier = script_directory / manga_current_name
        if not os.path.exists(nom_fichier):
            os.makedirs(nom_fichier)
        Download_settings()
    
# S√©lectionner tous les chapitres / Volumes d'un manga en cliquant sur la CheckBox
def select_all():
    global chapitres
    global All_chapters_len
    global chapters_current_selected
    global manga_current_name
    global total_downloads

    if select_all_var.get() == 1:
        chapters_box.select_set(0, tk.END)  # S√©lectionner tous les √©l√©ments de la ListBox
        chapters = chapitres[manga_current_name]
        chapters_current_selected = chapters
        print(chapters_current_selected)    # Afficher tous les chapitres s√©lectionn√©s               ##### Track activity
        All_chapters_len = len(chapters_current_selected)
        total_downloads = All_chapters_len
        canvas.itemconfigure(Chapter_selected, text=f'{All_chapters_len} selected')
    else:
        chapters_box.selection_clear(0, tk.END)  # D√©s√©lectionner tous les √©l√©ments de la ListBox
        chapters_current_selected = [] # r√©initialiser la s√©lection des chapitres
        print(chapters_current_selected)    # Afficher tous les chapitres s√©lectionn√©s               ##### Track activity
        canvas.itemconfigure(Chapter_selected, text=f'0 selected')

# Update les r√©sultats de recherche de la SearchBar dans la Manga Name List
def update_results(event):
    keyword = entry_1.get()
    cleaned_datas = datas['name'].fillna('')  # Remplacer les valeurs manquantes par une cha√Æne vide
    results = cleaned_datas[cleaned_datas.str.contains(keyword, case=False)]
    result_list = results.tolist()  # Convertir les r√©sultats en liste
    result_box.delete(0, tk.END)  # Effacer le contenu pr√©c√©dent de la liste
    for result in result_list:
        result_box.insert(tk.END, result)  # Ins√©rer chaque r√©sultat dans la liste

# Actions lorsqu'un manga est s√©lectionn√©
def on_mangas_select(event):
    global manga_current_name

    selected_indices = result_box.curselection()  # R√©cup√©rer les indices des √©l√©ments s√©lectionn√©s
    selected_items = [result_box.get(index) for index in selected_indices]  # R√©cup√©rer les √©l√©ments s√©lectionn√©s
    if selected_items:
        print(selected_items)                                                       ##### Track activity
        manga_name = selected_items[0]
        manga_current_name = manga_name
        try:
            update_chapters(manga_name)
            if len(manga_name) > 15:
                truncated_text = manga_name[:15] + "..."
                canvas.itemconfigure(Manga_selected, text=truncated_text)
            else:
                canvas.itemconfigure(Manga_selected, text=manga_name)
        except:
            print("aucun manga s√©lectionn√©")                                            ##### Track activity

# Update les r√©sultats dans la Chapter List lorqu'un manga est s√©lectionn√©
def update_chapters(manga_name):
    global chapitres
    global All_chapters_len

    if manga_name in chapitres:
        chapters = chapitres[manga_name]
        chapters_box.delete(0, tk.END)  # Effacer le contenu pr√©c√©dent de la liste d√©roulante
        All_chapters_len = len(chapters) # R√©cup√©rer le nombre total de chapitres du manga s√©lectionn√©
        for chapter in chapters:
            chapters_box.insert(tk.END, chapter)  # Ins√©rer chaque chapitre dans la liste d√©roulante
        if select_all_var.get() == 1:
            select_all()

# Actions lorsque des chapitres sont s√©lectionn√©s
def on_chapters_select(event):
    global total_downloads
    global chapters_current_selected
    
    selected_chapters = chapters_box.curselection()  # R√©cup√©rer les indices des chapitres s√©lectionn√©s
    selected_items = [chapters_box.get(index) for index in selected_chapters]  # R√©cup√©rer les chapitres s√©lectionn√©s
    chapters_current_selected = selected_items
    print(selected_items)                                                                       ##### Track activity
    total_downloads = len(selected_items)
    canvas.itemconfigure(Chapter_selected, text=f'{total_downloads} selected')

#### √âv√®nements lorsque la souris Entre/Sort d'un bouton ###
def Download_enter(event):
    global Download_state
    if Download_state == True:
        None
    else:
        button_1.configure(image=button_download_2)

def Download_leave(event):
    button_1.configure(image=button_download_1)

def Update_enter(event):
    button_2.configure(image=button_update_2)

def Update_leave(event):
    button_2.configure(image=button_update_1)
############################################################################################################################################################

Name_App = PhotoImage(
    file=relative_to_assets("Name_App.png"))                                                   ### logo du nom de l'appli
image_9 = canvas.create_image(
    481.0,
    65.0,
    image=Name_App
)

Logo_App = PhotoImage(
    file=relative_to_assets("Logo_App.png"))                                                   ### logo d'appli üêº
image_10 = canvas.create_image(
    85.0,
    65.0,
    image=Logo_App
)

SearchBar_background = PhotoImage(
    file=relative_to_assets("SearchBar_background.png"))                                       ### Background de la barre de recherche
image_7 = canvas.create_image(
    495.0,
    209.0,
    image=SearchBar_background
)

SearchBar_frontground = PhotoImage(
    file=relative_to_assets("SearchBar_frontground.png"))                                      ### Frontground de la barre de recherche
image_8 = canvas.create_image(
    511.0,
    202.0,
    image=SearchBar_frontground
)

##########################################################################################    SearchBar
entry_image_1 = PhotoImage(
    file=relative_to_assets("entry_1.png"))   # D√©fini le rectangle d'entr√©e de la SearchBar
entry_bg_1 = canvas.create_image(
    510.5,
    204.0,
    image=entry_image_1
)
entry_1 = Entry(
    bd=0,
    bg="#FFFFFF",
    fg="#000716",
    highlightthickness=0
)
entry_1.place(
    x=376.0,
    y=195.0,
    width=269.0,
    height=16.0
)
##########################################################################################  Choix d√©roulant site de scrapping

canvas.create_text(
    413.0,
    150.0,
    anchor="nw",
    text="üåê",                                                                    ### üåê
    fill="#FFFFFF",
    font=("Inter", 15 * -1)
)

# Liste d√©roulante pour le choix du site
website_list_var = StringVar(window)
website_list_var.set(selected_website)  # Valeur par d√©faut

# Langues par d√©faut ( possibilit√© d'ajouter d'autres langues )
website_menu = OptionMenu(
    window,
    website_list_var,
    "scantrad-vf",
    "lelscans.net",
    "fmteam.fr"
)
website_menu.place(
    x=440.0,
    y=150.0
)
website_menu.configure(
    bg="#FFFFFF"
)
# Associer la fonction au changement de site en utilisant trace_add()
website_list_var.trace_add("write", Update_website)

##########################################################################################

Chapters_list_Box = PhotoImage(
    file=relative_to_assets("Chapters_list_Box.png"))                                           ### Zone d'infos sur les chapitres disponibles
image_5 = canvas.create_image(
    588.8148193359375,
    392.142578125,
    image=Chapters_list_Box
)

Manga_name_listBox = PhotoImage(
    file=relative_to_assets("Manga_name_listBox.png"))                                          ### Zone d'infos sur les mangas disponibles
image_6 = canvas.create_image(
    382.6719970703125,
    392.142578125,
    image=Manga_name_listBox
)

##########################################################################################      Manga Name Box
canvas.create_text(
    331.0,
    269.0,
    anchor="nw",
    text="Manga Name",                                                                          ### Manga Name (Text)
    fill="#FFFFFF",
    font=("Inter", 15 * -1)
)

# Cr√©er une scrollbar pour la liste des noms de mangas
result_scrollbar = tk.Scrollbar(window)
result_box = tk.Listbox(window, selectmode=tk.SINGLE)                                           # liste pour afficher les noms de mangas
result_box.place(x=306.0, 
                 y=300.0, 
                 width=150, 
                 height=190)

result_scrollbar.config(command=result_box.yview)                               # Li√© l'√©l√©ment de la scrollbar √† la liste de noms de mangas
result_scrollbar.place(x=265, y=300, height=190)                                      # Barre de d√©filement
result_box.config(yscrollcommand=result_scrollbar.set, bd=0)                          # Liste
##########################################################################################      Chapter Available Box
canvas.create_text(
    525.0,
    269.0,
    anchor="nw",
    text="Chapter / Volume",                                                                    ### Chapter / Volume (Text)
    fill="#FFFFFF",
    font=("Inter", 15 * -1)
)

# Cr√©er une scrollbar pour la liste des chapitres
chapters_scrollbar = tk.Scrollbar(window)
chapters_box = tk.Listbox(window, selectmode=tk.MULTIPLE)                                       # liste d√©roulante pour afficher les chapitres
chapters_box.place(x=535.0, 
                 y=300.0, 
                 width=100, 
                 height=190)

chapters_scrollbar.config(command=chapters_box.yview)                             # Li√© l'√©l√©ment de la scrollbar √† la liste de chapitres
chapters_scrollbar.place(x=685, y=300, height=190)                                      # Barre de d√©filement 
chapters_box.config(yscrollcommand=chapters_scrollbar.set, bd=0)                        # Liste 

##########################################################################################


##########################################################################################      Association des √©v√®nements
# Associer l'√©v√©nement '<KeyRelease>' √† la fonction de mise √† jour des r√©sultats
entry_1.bind('<KeyRelease>', update_results)

# Associer l'√©v√©nement '<ListboxSelect>' √† la fonction de capture de la s√©lection
result_box.bind('<<ListboxSelect>>', on_mangas_select)

# Associer l'√©v√©nement '<ListboxSelect>' √† la fonction de capture de la s√©lection des chapitres
chapters_box.bind('<<ListboxSelect>>', on_chapters_select)
##########################################################################################


############################################### Informations de t√©l√©chargement ##########################################    
Info_download = PhotoImage(
    file=relative_to_assets("Info_download.png"))                                              
image_1 = canvas.create_image(
    843.0,
    575.0,
    image=Info_download,
    state=tk.HIDDEN  # Cacher l'image d√®s le d√©but
)

progressbar = ttk.Progressbar(window, mode="determinate")       # Cr√©ation de la barre de progression
percentage_label = tk.Label(window, text="0%", bg="white")                  # Cr√©ation du label pour afficher le pourcentage

#########################################################################################################################

select_all_var = tk.IntVar() # Cr√©ation d'une variable enti√®re pour suivre l'√©tat de la Checkbox ( 0 / 1 )
# Cr√©ation de la checkBox pour s√©lectionner tous les chapitres d'un Manga
Check_box = tk.Checkbutton(window, text="Select All", variable=select_all_var, command=select_all,bg="white")                     ### Checkbox
Check_box.place(
    x=547.0,
    y=525.0)

chapters_info_box = PhotoImage(
    file=relative_to_assets("Chapters_info.png"))                                               ### Zone d'infos sur les chapitres disponibles
image_3 = canvas.create_image(
    588.0,
    584.0,
    image=chapters_info_box
)

Manga_name_info_box = PhotoImage(
    file=relative_to_assets("Manga_name_info.png"))                                             ### Zone d'infos sur les mangas disponibles
image_4 = canvas.create_image(
    381.0,
    584.0,
    image=Manga_name_info_box
)

Manga_selected = canvas.create_text(
    305.0,
    570.0,
    anchor="nw",
    text="",                                                                                 ### Manga S√©lectionn√©
    fill="#6B0000",
    font=("Inter", 16 * -1)
)

Chapter_selected = canvas.create_text(
    550.0,
    570.0,
    anchor="nw",
    text="",                                                                                 ### Nombre de Chapitres s√©lectionn√©s
    fill="#6B0000",
    font=("Inter", 16 * -1)
)

##########################################################################################    BUTTONS   ############################################################################
button_download_2 = PhotoImage(file=relative_to_assets("Download_2.png"))
button_download_1 = PhotoImage(file=relative_to_assets("Download_1.png"))                  
button_1 = Button(
    image=button_download_1,
    borderwidth=0,
    highlightthickness=0,
    command=show_Download_info,
    relief="flat",
    cursor="hand2"
)
button_1.place(
    x=801.0,
    y=584.0,
    width=95.0,
    height=93
)
button_1.bind("<Enter>", Download_enter)  # Lorsque la souris entre dans la zone du bouton
button_1.bind("<Leave>", Download_leave)   # Lorsque la souris quitte la zone du bouton
############################################
button_update_2 = PhotoImage(file=relative_to_assets("Update_2.png"))
button_update_1 = PhotoImage(file=relative_to_assets("Update_1.png"))
button_2 = Button(
    image=button_update_1,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_update clicked"),                                 ##### Track activity
    relief="flat",
    cursor="hand2 "
)
button_2.place(
    x=664.0,
    y=57.0,
    width=41.0,
    height=44.0
)
button_2.bind("<Enter>", Update_enter)  # Lorsque la souris entre dans la zone du bouton
button_2.bind("<Leave>", Update_leave)   # Lorsque la souris quitte la zone du bouton
######################################################################################################################################################################################

# Action √† ex√©cuter lors de la fermeture de la fen√™tre
window.protocol("WM_DELETE_WINDOW", on_closing)

window.resizable(False, False)
window.mainloop()